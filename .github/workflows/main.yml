name: Build and Release WinUI App

on:
  push:
    branches:
      - main
  create: # 当创建标签时触发（用于发布 Release）
    tags:
      - 'v*' # 匹配例如 v1.0.0, v1.0 等标签

jobs:
  build-and-release:
    runs-on: windows-latest # WinUI 项目需要 Windows 运行器

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x' # ⭐ 请根据你的 WinUI 项目的 .NET 版本调整 (例如: 6.0.x, 7.0.x, 8.0.x)

      - name: 安装 Visual Studio MSBuild 工具
        # 这一步使用一个专用的 action 来安装 MSBuild，比手动安装更可靠和高效
        # 这个 action 会自动将 MSBuild 添加到 PATH 中
        uses: microsoft/setup-msbuild@v1.1
        with:
          msbuild-version: latest # 安装最新版本的 MSBuild
          # 如果你的项目需要特定的 VS 版本，可以指定 installation-path 或 components
          # 例如: components: 'Microsoft.VisualStudio.Component.Desktop.SDK.Editor;Microsoft.VisualStudio.Component.UWP.BuildTools'

      - name: 恢复项目依赖
        run: dotnet restore App2.sln # ⭐ 确保 'App2.sln' 是你的解决方案文件名

      - name: 编译并打包 WinUI 应用为 MSIX
        # 使用 MSBuild 命令编译解决方案并打包为 MSIX
        # msbuild 此时已在 PATH 中
        run: |
          msbuild App2.sln /p:Configuration=Release /p:Platform="x64" /p:AppxBundle=Always /p:AppxBundlePlatforms="x64" /p:UapAppxPackageBuildMode=StoreUpload
        shell: pwsh # 使用 PowerShell 执行 MSBuild 命令

      - name: 查找 MSIX 安装包
        id: find_msix
        run: |
          # 动态查找生成的 .msix 文件。WinUI 项目的输出路径可能因项目结构而异。
          # 常见路径在 .\你的项目名\bin\Release\AppPackages\ 或 .\你的项目名\bin\Release\
          $msixPath = Get-ChildItem -Path ".\**\*.msix" -Recurse | Where-Object { $_.FullName -like "*AppPackages*" -or $_.DirectoryName -like "*bin\Release*" } | Select-Object -ExpandProperty FullName | Select-Object -First 1
          
          if ($msixPath) {
              echo "msix_path=$msixPath" >> $env:GITHUB_OUTPUT
              Write-Host "已找到 MSIX 安装包: $msixPath"
          } else {
              Write-Error "未找到 MSIX 安装包。请检查你的项目构建输出路径和 msbuild 参数。"
              exit 1
          }
        shell: pwsh

      - name: 上传 MSIX 作为工作流产物
        uses: actions/upload-artifact@v4
        with:
          name: SCE-NEXT-MSIX-Package
          path: ${{ steps.find_msix.outputs.msix_path }}

      - name: 创建 GitHub Release
        if: startsWith(github.ref, 'refs/tags/') # 仅在通过标签触发时运行
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub 自动提供的令牌
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: 上传 MSIX 到 Release 资产
        if: startsWith(github.ref, 'refs/tags/') && steps.find_msix.outputs.msix_path
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_msix.outputs.msix_path }}
          asset_name: SCE-NEXT.msix # ⭐ 你可以根据需要调整资产文件名
          asset_content_type: application/msix
