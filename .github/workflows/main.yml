name: 构建并发布 WinUI 应用 (PowerShell 组件安装)

on:
  push:
    branches:
      - main
  create: # 标签创建时触发（用于发布 Release）
    tags:
      - 'v*' # 匹配例如 v1.0.0, v1.0 等标签

jobs:
  build-and-release:
    runs-on: windows-latest # WinUI 项目需要 Windows 运行器

    steps:
      - name: ⬇️ 检出代码
        uses: actions/checkout@v4

      - name: ⚙️ 设置 .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x' # 保持 6.0.x

      - name: 🛠️ 安装缺失的 Visual Studio 组件
        # ⭐ 重要修改：使用 PowerShell 显式安装组件。
        # 这将确保特定的 SDK 和 WinUI 构建工具存在。
        run: |
          # 安装 VSSetup PowerShell 模块，用于管理 Visual Studio 组件
          Install-Module -Name VSSetup -Force -Scope CurrentUser
          
          # 获取 Visual Studio 2022 (版本 17) 的安装路径
          $vsInstallPath = (Get-VsInstallationPath -Version 17)
          if (-not $vsInstallPath) {
              Write-Error "未找到 Visual Studio 2022 (版本 17) 的安装路径。请检查 runner 环境。"
              exit 1
          }
          Write-Host "Visual Studio 2022 安装路径: $vsInstallPath"
          
          # 添加 WinUI/UWP 构建工具
          Add-VsComponent -Force -ComponentID Microsoft.VisualStudio.Component.UWP.BuildTools -InstallPath $vsInstallPath
          # 添加 Windows App SDK 组件
          Add-VsComponent -Force -ComponentID Microsoft.VisualStudio.Component.WindowsAppSDK -InstallPath $vsInstallPath
          # 添加 C++ 构建工具 (v143)
          Add-VsComponent -Force -ComponentID Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -InstallPath $vsInstallPath
          # 添加 C++ 可再发行组件
          Add-VsComponent -Force -ComponentID Microsoft.VisualStudio.Component.VC.Redist.14.Latest -InstallPath $vsInstallPath
          # 添加 .NET Framework 4.7.2 目标包 (XAML 编译器需要)
          Add-VsComponent -Force -ComponentID Microsoft.Net.Component.4.7.2.TargetingPack -InstallPath $vsInstallPath
          
          # ⭐ 关键：安装项目依赖的特定 Windows SDK 10.0.26100.0
          # 组件 ID 通常是 'Microsoft.VisualStudio.Component.Windows10SDK.构建号'
          Add-VsComponent -Force -ComponentID Microsoft.VisualStudio.Component.Windows10SDK.26100 -InstallPath $vsInstallPath
          
          Write-Host "✅ Visual Studio 组件安装完成。"
        shell: pwsh

      - name: 🛠️ 设置 MSBuild (在组件安装后，确保其路径正确)
        uses: microsoft/setup-msbuild@v2 

      - name: 🧹 清理 NuGet 全局缓存 (可选，但有助于确保全新下载)
        run: dotnet nuget locals all --clear
        shell: pwsh

      - name: 📦 恢复项目依赖 (使用 MSBuild)
        run: msbuild App2.sln /t:restore
        shell: pwsh

      - name: 🚀 编译并打包 WinUI 应用为 MSIX
        run: |
          msbuild App2.sln /p:Configuration=Release /p:Platform="x64" /p:AppxBundle=Always /p:AppxBundlePlatforms="x64" /p:UapAppxPackageBuildMode=StoreUpload
        shell: pwsh 

      - name: 🔍 查找 MSIX 安装包
        id: find_msix
        run: |
          $msixPath = Get-ChildItem -Path ".\**\*.msix" -Recurse | Where-Object { $_.FullName -like "*AppPackages*" -or $_.DirectoryName -like "*bin\Release*" } | Select-Object -ExpandProperty FullName | Select-Object -First 1
          if ($msixPath) {
              echo "msix_path=$msixPath" >> $env:GITHUB_OUTPUT
              Write-Host "✅ 已找到 MSIX 安装包: $msixPath"
          } else {
              Write-Error "❌ 未找到 MSIX 安装包。请检查你的项目构建输出路径和 MSBuild 参数。"
              exit 1
          }
        shell: pwsh

      - name: ⬆️ 上传 MSIX 作为工作流产物
        uses: actions/upload-artifact@v4
        with:
          name: SCE-NEXT-MSIX-Package
          path: ${{ steps.find_msix.outputs.msix_path }}

      - name: ✨ 创建 GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: 📤 上传 MSIX 到 Release 资产
        if: startsWith(github.ref, 'refs/tags/') && steps.find_msix.outputs.msix_path
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_msix.outputs.msix_path }}
          asset_name: SCE-NEXT.msix
          asset_content_type: application/msix
