name: 构建并发布 WinUI 应用 (VS Build Tools 安装修复与强化日志)

on:
  push:
    branches:
      - main
  create:
    tags:
      - 'v*'

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      - name: ⬇️ 检出代码
        uses: actions/checkout@v4

      - name: ⚙️ 设置 .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x' 

      - name: ⬇️ 下载 Visual Studio Build Tools 安装器
        run: |
          Invoke-WebRequest -Uri "https://aka.ms/vs/17/release/vs_buildtools.exe" -OutFile vs_buildtools.exe
          Write-Host "✅ vs_buildtools.exe 下载完成。"
        shell: pwsh

      - name: 🛠️ 安装 Visual Studio Build Tools 及所需组件 (单次执行，强制输出)
        # ⭐ 核心修改：只执行 Start-Process 一次，并捕获其进程对象以获取退出码
        run: |
          $logFile = "vs_install_output.log"
          $errorFile = "vs_install_error.log"

          Write-Host "ℹ️ 开始安装 Visual Studio Build Tools，输出将重定向到日志文件 '$logFile' 和 '$errorFile'..."

          # 执行安装器，捕获其输出和错误到文件，并等待其完成
          # -PassThru 参数是关键，它会返回进程对象，我们可以从中获取 ExitCode
          $process = Start-Process -FilePath ".\vs_buildtools.exe" -ArgumentList @(
              "--installPath", "D:\VSBuildTools",
              "--add", "Microsoft.VisualStudio.Workload.VCTools",
              "--add", "Microsoft.VisualStudio.Workload.UniversalBuildTools",
              "--add", "Microsoft.VisualStudio.Component.WindowsAppSDK",
              "--add", "Microsoft.Net.Component.4.7.2.TargetingPack",
              "--add", "Microsoft.VisualStudio.Component.Windows10SDK.26100",
              "--add", "Microsoft.VisualStudio.Component.VC.Redist.14.Latest",
              "--add", "Microsoft.VisualStudio.Component.Roslyn.Compiler",
              "--add", "Microsoft.VisualStudio.Component.DotNetBuildTools.6.0",
              "--includeRecommended",
              "--wait"
          ) -RedirectStandardOutput $logFile -RedirectStandardError $errorFile -NoNewWindow -Wait -PassThru
          
          Write-Host "--- Visual Studio 安装标准输出 ---"
          Get-Content $logFile -ErrorAction SilentlyContinue | ForEach-Object { Write-Host $_ }
          Write-Host "--- Visual Studio 安装标准输出结束 ---"

          Write-Host "--- Visual Studio 安装标准错误 ---"
          Get-Content $errorFile -ErrorAction SilentlyContinue | ForEach-Object { Write-Host $_ }
          Write-Host "--- Visual Studio 安装标准错误结束 ---"
          
          # 检查安装器进程的退出码
          if ($process.ExitCode -ne 0) {
              Write-Error "Visual Studio Build Tools 安装器退出码非零: $($process.ExitCode)。安装可能失败。"
              # 如果安装失败，则退出此步骤，并使用安装器的退出码
              exit $process.ExitCode
          }
          Write-Host "✅ Visual Studio Build Tools 安装器进程已完成。"

        shell: pwsh
        timeout-minutes: 30 # 保持较长的超时时间

      - name: 🔍 验证 Visual Studio 安装并设置 MSBuild 环境变量
        id: setup_msbuild_env
        run: |
          $vsPath = "D:\VSBuildTools"
          $msbuildPath = Join-Path $vsPath "MSBuild\Current\Bin\MSBuild.exe"
          
          if (-not (Test-Path -Path $vsPath -PathType Container)) {
              Write-Error "VS Build Tools 安装路径 '$vsPath' 不存在。安装可能失败。"
              exit 1
          }

          if (-not (Test-Path $msbuildPath)) {
              $msbuildPath = Join-Path $vsPath "MSBuild\17.0\Bin\MSBuild.exe" 
          }
          
          if (-not (Test-Path $msbuildPath)) {
              Write-Error "未能找到新安装的 MSBuild.exe。请检查安装路径和结构。"
              Write-Host "--- D:\VSBuildTools 目录内容 ---"
              Get-ChildItem -Path "D:\VSBuildTools" -Recurse -ErrorAction SilentlyContinue | Format-Table -AutoSize
              Write-Host "--- D:\VSBuildTools 目录内容结束 ---"
              exit 1
          }
          
          echo "##vso[task.prependpath]$($msbuildPath | Split-Path -Parent)"
          echo "VSCMD_START_DIR=$vsPath" | Out-File -FilePath $env:GITHUB_ENV -Append
          
          Write-Host "✅ MSBuild 已添加到 PATH: $($msbuildPath | Split-Path -Parent)"
        shell: pwsh

      - name: ⬆️ 上传 Visual Studio 安装日志 (如果安装失败)
        if: always() 
        uses: actions/upload-artifact@v4
        with:
          name: VS_Build_Tools_Install_Logs
          path: |
            C:\ProgramData\Microsoft\VisualStudio\Packages\_Instances\**\*.log
            vs_install_output.log 
            vs_install_error.log  
          retention-days: 5 

      - name: 🧹 清理 NuGet 全局缓存 (可选)
        run: dotnet nuget locals all --clear
        shell: pwsh

      - name: 📦 恢复项目依赖 (使用 MSBuild)
        run: msbuild App2.sln /t:restore
        shell: pwsh

      - name: 🚀 编译并打包 WinUI 应用为 MSIX
        run: |
          msbuild App2.sln /p:Configuration=Release /p:Platform="x64" /p:AppxBundle=Always /p:AppxBundlePlatforms="x64" /p:UapAppxPackageBuildMode=StoreUpload
        shell: pwsh 

      - name: 🔍 查找 MSIX 安装包
        id: find_msix
        run: |
          $msixPath = Get-ChildItem -Path ".\**\*.msix" -Recurse | Where-Object { $_.FullName -like "*AppPackages*" -or $_.DirectoryName -like "*bin\Release*" } | Select-Object -ExpandProperty FullName | Select-Object -First 1
          if ($msixPath) {
              echo "msix_path=$msixPath" >> $env:GITHUB_OUTPUT
              Write-Host "✅ 已找到 MSIX 安装包: $msixPath"
          } else {
              Write-Error "❌ 未找到 MSIX 安装包。请检查你的项目构建输出路径和 MSBuild 参数。"
              exit 1
          }
        shell: pwsh

      - name: ⬆️ 上传 MSIX 作为工作流产物
        uses: actions/upload-artifact@v4
        with:
          name: SCE-NEXT-MSIX-Package
          path: ${{ steps.find_msix.outputs.msix_path }}

      - name: ✨ 创建 GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: 📤 上传 MSIX 到 Release 资产
        if: startsWith(github.ref, 'refs/tags/') && steps.find_msix.outputs.msix_path
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_msix.outputs.msix_path }}
          asset_name: SCE-NEXT.msix
          asset_content_type: application/msix
