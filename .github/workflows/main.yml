name: 构建并发布 WinUI 应用 (VS Build Tools 安装日志调试)

on:
  push:
    branches:
      - main
  create:
    tags:
      - 'v*'

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      - name: ⬇️ 检出代码
        uses: actions/checkout@v4

      - name: ⚙️ 设置 .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x' 

      - name: ⬇️ 下载 Visual Studio Build Tools 安装器
        run: |
          Invoke-WebRequest -Uri "https://aka.ms/vs/17/release/vs_buildtools.exe" -OutFile vs_buildtools.exe
        shell: pwsh

      - name: 🛠️ 安装 Visual Studio Build Tools 及所需组件 (日志调试模式)
        # 移除 --quiet 以便查看实时输出，并增加超时时间
        # ⭐ 注意：`--wait` 并不保证所有组件都安装完成，只保证引导程序退出。
        # 如果这里出现非零退出码，则表示安装程序本身出了问题。
        run: |
          Start-Process -FilePath ".\vs_buildtools.exe" -ArgumentList @(
              "--installPath", "D:\VSBuildTools",
              "--add", "Microsoft.VisualStudio.Workload.VCTools",
              "--add", "Microsoft.VisualStudio.Workload.UniversalBuildTools",
              "--add", "Microsoft.VisualStudio.Component.WindowsAppSDK",
              "--add", "Microsoft.Net.Component.4.7.2.TargetingPack",
              "--add", "Microsoft.VisualStudio.Component.Windows10SDK.26100",
              "--add", "Microsoft.VisualStudio.Component.VC.Redist.14.Latest",
              "--add", "Microsoft.VisualStudio.Component.Roslyn.Compiler",
              "--add", "Microsoft.VisualStudio.Component.DotNetBuildTools.6.0",
              "--includeRecommended",
              "--wait"
          ) -Wait -NoNewWindow -PassThru | Out-Null # 使用 Start-Process 并等待，确保进程结束
        shell: pwsh
        timeout-minutes: 30 # 进一步增加超时时间，以防万一

      - name: 🔍 验证 Visual Studio 安装并设置 MSBuild 环境变量
        id: setup_msbuild_env
        run: |
          $vsPath = "D:\VSBuildTools"
          $msbuildPath = Join-Path $vsPath "MSBuild\Current\Bin\MSBuild.exe"
          
          # 更严格地检查安装路径
          if (-not (Test-Path -Path $vsPath -PathType Container)) {
              Write-Error "VS Build Tools 安装路径 '$vsPath' 不存在。安装可能失败。"
              exit 1
          }

          if (-not (Test-Path $msbuildPath)) {
              # 兼容性查找，如果 Current\Bin 不存在，可能是 17.0\Bin
              $msbuildPath = Join-Path $vsPath "MSBuild\17.0\Bin\MSBuild.exe" 
          }
          
          if (-not (Test-Path $msbuildPath)) {
              Write-Error "未能找到新安装的 MSBuild.exe。请检查安装路径和结构。"
              # 添加 ls D:\VSBuildTools，以便在失败时查看安装目录内容，辅助调试
              Write-Host "--- D:\VSBuildTools 目录内容 ---"
              Get-ChildItem -Path "D:\VSBuildTools" -Recurse -ErrorAction SilentlyContinue | Format-Table -AutoSize
              Write-Host "--- D:\VSBuildTools 目录内容结束 ---"
              exit 1
          }
          
          echo "##vso[task.prependpath]$($msbuildPath | Split-Path -Parent)"
          echo "VSCMD_START_DIR=$vsPath" | Out-File -FilePath $env:GITHUB_ENV -Append
          
          Write-Host "✅ MSBuild 已添加到 PATH: $($msbuildPath | Split-Path -Parent)"
        shell: pwsh

      - name: ⬆️ 上传 Visual Studio 安装日志 (如果安装失败)
        if: always() # 无论上一步是否失败都执行
        uses: actions/upload-artifact@v4
        with:
          name: VS_Build_Tools_Install_Logs
          # Visual Studio 安装日志通常位于 C:\ProgramData\Microsoft\VisualStudio\Packages\_Instances\ 下
          # 查找最近的日志文件，通常是 .log 格式，也可能有其他文件
          path: C:\ProgramData\Microsoft\VisualStudio\Packages\_Instances\**\*.log
          retention-days: 5 # 保留日志5天

      - name: 🧹 清理 NuGet 全局缓存 (可选)
        run: dotnet nuget locals all --clear
        shell: pwsh

      - name: 📦 恢复项目依赖 (使用 MSBuild)
        run: msbuild App2.sln /t:restore
        shell: pwsh

      - name: 🚀 编译并打包 WinUI 应用为 MSIX
        run: |
          msbuild App2.sln /p:Configuration=Release /p:Platform="x64" /p:AppxBundle=Always /p:AppxBundlePlatforms="x64" /p:UapAppxPackageBuildMode=StoreUpload
        shell: pwsh 

      - name: 🔍 查找 MSIX 安装包
        id: find_msix
        run: |
          $msixPath = Get-ChildItem -Path ".\**\*.msix" -Recurse | Where-Object { $_.FullName -like "*AppPackages*" -or $_.DirectoryName -like "*bin\Release*" } | Select-Object -ExpandProperty FullName | Select-Object -First 1
          if ($msixPath) {
              echo "msix_path=$msixPath" >> $env:GITHUB_OUTPUT
              Write-Host "✅ 已找到 MSIX 安装包: $msixPath"
          } else {
              Write-Error "❌ 未找到 MSIX 安装包。请检查你的项目构建输出路径和 MSBuild 参数。"
              exit 1
          }
        shell: pwsh

      - name: ⬆️ 上传 MSIX 作为工作流产物
        uses: actions/upload-artifact@v4
        with:
          name: SCE-NEXT-MSIX-Package
          path: ${{ steps.find_msix.outputs.msix_path }}

      - name: ✨ 创建 GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: 📤 上传 MSIX 到 Release 资产
        if: startsWith(github.ref, 'refs/tags/') && steps.find_msix.outputs.msix_path
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_msix.outputs.msix_path }}
          asset_name: SCE-NEXT.msix
          asset_content_type: application/msix
