name: 构建并发布 WinUI 应用 (直接传递 VS 安装参数给 Chocolatey)

on:
  push:
    branches:
      - main
  create:
    tags:
      - 'v*'

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      - name: ⬇️ 检出代码
        uses: actions/checkout@v4

      - name: ⚙️ 设置 .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x' 

      - name: 🛠️ 通过 Chocolatey 安装 Visual Studio Build Tools 及所需组件
        run: |
          Write-Host "ℹ️ 检查 Chocolatey 是否已安装..."
          choco -?
          Write-Host "✅ Chocolatey 已可用。"

          # ⭐ 核心修改：将所有 Visual Studio 安装器参数直接组合成一个字符串
          # 确保每个参数和值都是独立项，由空格分隔
          # 注意：路径如果包含空格，需要用双引号包围 (D:\VSBuildTools 不含空格，所以可以不包)
          $vsInstallerArguments = @(
              "--installPath", "D:\VSBuildTools",
              "--add", "Microsoft.VisualStudio.Workload.UniversalPlatform",
              "--add", "Microsoft.VisualStudio.Workload.VCTools",
              "--add", "Microsoft.VisualStudio.Component.Windows10SDK.26100",
              # --add Microsoft.VisualStudio.Component.WindowsAppSDK 如果 WinUI 需要，但通常包含在 UniversalPlatform 中
              "--add", "Microsoft.VisualStudio.Component.VC.Redist.14.Latest",
              "--add", "Microsoft.VisualStudio.Component.Roslyn.Compiler",
              "--add", "Microsoft.Net.Component.DotNetBuildTools.6.0",
              "--add", "Microsoft.Net.Component.4.7.2.TargetingPack",
              "--includeRecommended",
              "--quiet",     # 静默安装
              "--norestart"  # 禁止安装后重启
          ) -join ' ' # 将数组连接成一个空格分隔的字符串

          # 将整个 vsInstallerArguments 字符串作为 --params 的值传递
          # choco --params 期待的是一个字符串，这个字符串由 Chocolatey 包的内部脚本解析
          # 这样 vsInstallerArguments 就会被直接传递给 Install-VisualStudio 或类似的内部逻辑
          Write-Host "ℹ️ 传递给 Chocolatey 的原始 VS 安装参数字符串: '$vsInstallerArguments'"

          choco install visualstudio2022buildtools --params "'$vsInstallerArguments'" --yes --force --timeout-minutes=50

          Write-Host "✅ Chocolatey 安装 Visual Studio Build Tools 完成。"
        shell: pwsh
        timeout-minutes: 60 # 进一步增加超时时间

      - name: 🔍 验证 Visual Studio 安装并设置 MSBuild 环境变量
        id: setup_msbuild_env
        run: |
          # Chocolatey 的 VS 包通常会忽略 --installPath 并安装到默认位置
          # 常见的路径是 C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools
          
          $actualVsPath = (Get-ChildItem -Path "C:\Program Files (x86)\Microsoft Visual Studio\*" -Directory | Where-Object { $_.Name -like "*2022*" -and $_.Name -like "*BuildTools*" } | Select-Object -ExpandProperty FullName -First 1)

          if (-not $actualVsPath) {
             $actualVsPath = (Get-ChildItem -Path "C:\Program Files\Microsoft Visual Studio\*" -Directory | Where-Object { $_.Name -like "*2022*" -and $_.Name -like "*BuildTools*" } | Select-Object -ExpandProperty FullName -First 1)
          }

          if (-not $actualVsPath) {
              Write-Error "❌ 错误: 未能在默认位置找到 Visual Studio Build Tools 2022 的安装路径。请检查 Chocolatey 安装日志。"
              Write-Host "--- C:\Program Files (x86)\Microsoft Visual Studio\ 目录内容 ---"
              Get-ChildItem -Path "C:\Program Files (x86)\Microsoft Visual Studio\" -ErrorAction SilentlyContinue | Format-Table -AutoSize
              Write-Host "--- C:\Program Files\Microsoft Visual Studio\ 目录内容 ---"
              Get-ChildItem -Path "C:\Program Files\Microsoft Visual Studio\" -ErrorAction SilentlyContinue | Format-Table -AutoSize
              exit 1
          }
          
          Write-Host "✅ 步骤: Visual Studio Build Tools 2022 安装路径: $actualVsPath"
          $vsPath = $actualVsPath 

          $msbuildPath = Join-Path $vsPath "MSBuild\Current\Bin\MSBuild.exe"
          if (-not (Test-Path $msbuildPath)) {
              $msbuildPath = Join-Path $vsPath "MSBuild\17.0\Bin\MSBuild.exe" 
          }
          
          Write-Host "✅ 步骤: 查找 MSBuild.exe..."
          if (-not (Test-Path $msbuildPath)) {
              Write-Error "❌ 错误: 未能找到新安装的 MSBuild.exe。请检查安装路径和结构。"
              Write-Host "--- $vsPath 目录内容 ---"
              Get-ChildItem -Path $vsPath -Recurse -ErrorAction SilentlyContinue | Format-Table -AutoSize
              Write-Host "--- $vsPath 目录内容结束 ---"
              exit 1
          }
          
          echo "##vso[task.prependpath]$($msbuildPath | Split-Path -Parent)"
          echo "VSCMD_START_DIR=$vsPath" | Out-File -FilePath $env:GITHUB_ENV -Append
          
          Write-Host "✅ 步骤: MSBuild 已添加到 PATH: $($msbuildPath | Split-Path -Parent)"
        shell: pwsh

      - name: 🧹 清理 NuGet 全局缓存 (可选)
        run: dotnet nuget locals all --clear
        shell: pwsh

      - name: 📦 恢复项目依赖 (使用 MSBuild)
        run: msbuild App2.sln /t:restore
        shell: pwsh

      - name: 🚀 编译并打包 WinUI 应用为 MSIX
        run: |
          msbuild App2.sln /p:Configuration=Release /p:Platform="x64" /p:AppxBundle=Always /p:AppxBundlePlatforms="x64" /p:UapAppxPackageBuildMode=StoreUpload
        shell: pwsh 

      - name: 🔍 查找 MSIX 安装包
        id: find_msix
        run: |
          $msixPath = Get-ChildItem -Path ".\**\*.msix" -Recurse | Where-Object { $_.FullName -like "*AppPackages*" -or $_.DirectoryName -like "*bin\Release*" } | Select-Object -ExpandProperty FullName | Select-Object -First 1
          if ($msixPath) {
              echo "msix_path=$msixPath" >> $env:GITHUB_OUTPUT
              Write-Host "✅ 已找到 MSIX 安装包: $msixPath"
          } else {
              Write-Error "❌ 未找到 MSIX 安装包。请检查你的项目构建输出路径和 MSBuild 参数。"
              exit 1
          }
        shell: pwsh

      - name: ⬆️ 上传 MSIX 作为工作流产物
        uses: actions/upload-artifact@v4
        with:
          name: SCE-NEXT-MSIX-Package
          path: ${{ steps.find_msix.outputs.msix_path }}

      - name: ✨ 创建 GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: 📤 上传 MSIX 到 Release 资产
        if: startsWith(github.ref, 'refs/tags/') && steps.find_msix.outputs.msix_path
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_msix.outputs.msix_path }}
          asset_name: SCE-NEXT.msix
          asset_content_type: application/msix
