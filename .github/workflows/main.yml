name: Build and Release WinUI App (Exact SDK Match & Clean Cache)

on:
  push:
    branches:
      - main
  create: # 标签创建时触发（用于发布 Release）
    tags:
      - 'v*' # 匹配例如 v1.0.0, v1.0 等标签

jobs:
  build-and-release:
    runs-on: windows-latest # WinUI 项目需要 Windows 运行器

    steps:
      - name: ⬇️ 检出代码
        uses: actions/checkout@v4

      - name: ⚙️ 设置 .NET SDK (C++项目可能不直接依赖，但为兼容性保留)
        uses: actions/setup-dotnet@v4
        with:
          # 您的项目是C++ WinUI，.NET SDK版本可能不直接影响，但为确保所有工具链兼容性，
          # 建议与您本地开发环境的.NET版本保持一致，或使用一个常用版本如6.0.x
          dotnet-version: '6.0.x' 

      - name: 🛠️ 安装 Visual Studio MSBuild 及精确匹配的WinUI/C++组件和SDK
        # 此步骤使用 microsoft/setup-msbuild Action，并根据您的项目文件（.vcxproj和.wapproj）
        # 精确指定所需的Windows SDK版本和所有必要的构建组件。
        uses: microsoft/setup-msbuild@v1.1
        with:
          msbuild-version: latest # 安装最新版本的 MSBuild
          # 明确列出匹配你本地VS安装和SLN文件分析的组件ID
          components: |
            Microsoft.VisualStudio.Component.MSBuild # MSBuild核心
            Microsoft.VisualStudio.Component.Roslyn.Compiler # C# 和 VB 编译器 (通常需要)
            
            # C++ 桌面开发工作负载核心组件 (根据SLN中的 .vcxproj 确认需要)
            Microsoft.VisualStudio.Component.VC.Tools.x86.x64 # C++ 构建工具 (v143)
            Microsoft.VisualStudio.Component.VC.Redist.14.Latest # 重要的 C++ 可再发行组件，解决DLL依赖
            Microsoft.VisualStudio.Component.Desktop.SDK.Editor # 桌面开发相关的SDK和编辑器工具
            
            # Windows 应用开发工作负载核心组件 (根据 SLN 中的 .wapproj 确认需要)
            Microsoft.VisualStudio.Component.UWP.BuildTools # UWP 构建工具
            Microsoft.VisualStudio.Component.WindowsAppSDK # Windows App SDK 开发组件
            # 关键！解决 XAML Compiler.dll 对 .NET Framework 4.7.2 的依赖
            Microsoft.Net.Component.4.7.2.TargetingPack 
            
            # ⭐ 精确指定项目依赖的 Windows SDK 版本
            # 根据 App2 (Package).wapproj 中的 <TargetPlatformVersion>10.0.26100.0</TargetPlatformVersion>
            # 以及 App2.vcxproj 中引用的 SDK Build Tools 10.0.26100.4188
            # 这个组件ID通常是 Microsoft.VisualStudio.Component.Windows10SDK.版本号
            Microsoft.VisualStudio.Component.Windows10SDK.26100 
            
            # .NET 构建工具 (与 setup-dotnet 中的版本一致)
            Microsoft.VisualStudio.Component.DotNetBuildTools.6.0 # 调整为你项目使用的 .NET 版本

      - name: 🧹 清理 NuGet 全局缓存
        # 在恢复依赖之前，清理本地的NuGet缓存，确保下载最新的、未损坏的包。
        run: dotnet nuget locals all --clear
        shell: pwsh

      - name: 📦 恢复项目依赖
        # 运行 dotnet restore 来下载 NuGet 包
        # 解决方案文件名为 'App2.sln'
        run: dotnet restore App2.sln 
        shell: pwsh

      - name: 🚀 编译并打包 WinUI 应用为 MSIX
        # 使用 MSBuild 命令编译解决方案并打包为 MSIX
        # MSBuild 此时应已正确添加到 PATH 中
        # 解决方案文件名为 'App2.sln'
        run: |
          msbuild App2.sln /p:Configuration=Release /p:Platform="x64" /p:AppxBundle=Always /p:AppxBundlePlatforms="x64" /p:UapAppxPackageBuildMode=StoreUpload
        shell: pwsh 

      - name: 🔍 查找 MSIX 安装包
        id: find_msix
        run: |
          # 动态查找生成的 .msix 文件。对于 WinUI 项目，常见输出路径在：
          # .\App2 (Package)\AppPackages\App2 (Package)_...\*.msix
          # 或者 .\App2 (Package)\bin\Release\
          # 我们使用更通用的递归搜索，优先匹配 AppPackages 目录或 bin\Release' 目录下的 .msix 文件
          $msixPath = Get-ChildItem -Path ".\**\*.msix" -Recurse | Where-Object { $_.FullName -like "*AppPackages*" -or $_.DirectoryName -like "*bin\Release*" } | Select-Object -ExpandProperty FullName | Select-Object -First 1
          
          if ($msixPath) {
              echo "msix_path=$msixPath" >> $env:GITHUB_OUTPUT
              Write-Host "✅ 已找到 MSIX 安装包: $msixPath"
          } else {
              Write-Error "❌ 未找到 MSIX 安装包。请检查你的项目构建输出路径和 MSBuild 参数。"
              exit 1
          }
        shell: pwsh

      - name: ⬆️ 上传 MSIX 作为工作流产物
        # 将找到的 MSIX 文件作为 GitHub Actions 的“工作流产物”上传，方便调试和下载。
        uses: actions/upload-artifact@v4
        with:
          name: SCE-NEXT-MSIX-Package
          path: ${{ steps.find_msix.outputs.msix_path }}

      - name: ✨ 创建 GitHub Release
        # 仅在通过标签触发时运行。此步骤会在 GitHub 上创建一个新的 Release。
        if: startsWith(github.ref, 'refs/tags/')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub 自动提供的令牌
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: 📤 上传 MSIX 到 Release 资产
        # 仅在通过标签触发且 MSIX 文件找到时运行。将 MSIX 文件作为附件上传到 Release。
        if: startsWith(github.ref, 'refs/tags/') && steps.find_msix.outputs.msix_path
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_msix.outputs.msix_path }}
          asset_name: SCE-NEXT.msix # ⭐ 根据需要调整资产文件名
          asset_content_type: application/msix
