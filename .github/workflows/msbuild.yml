name: Build and Package WinUI 3 App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x' # 确保这里与你的项目目标框架一致

    - name: Install Visual Studio Workloads for WinUI 3
      run: |
        $vsInstallerPath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
        $vsInstallDir = & "$vsInstallerPath" -latest -products * -property installationPath

        if (-not $vsInstallDir) {
            Write-Error "Could not find Visual Studio installation path using vswhere.exe."
            exit 1
        }

        $installerPath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vs_installer.exe"
        if (-not (Test-Path $installerPath)) {
            Write-Error "Visual Studio Installer executable not found at $installerPath."
            exit 1
        }

        Write-Host "Found Visual Studio installation at: $vsInstallDir"
        Write-Host "Installing VS workloads using: $installerPath"

        & "$installerPath" modify `
            --installPath "$vsInstallDir" `
            --add Microsoft.VisualStudio.Workload.Universal `
            --add Microsoft.VisualStudio.Workload.ManagedDesktop `
            --add Microsoft.VisualStudio.Workload.NativeDesktop `
            --quiet --wait --norestart

        if ($LASTEXITCODE -ne 0) {
            Write-Error "Failed to install Visual Studio workloads. Exit code: $LASTEXITCODE"
            exit $LASTEXITCODE
        }
        Write-Host "Visual Studio workloads installed successfully."
      shell: pwsh

    - name: Find MSBuild.exe # 修正后的步骤
      id: find_msbuild
      run: |
        # 直接使用我们从上一步骤日志中确认的 Visual Studio 安装路径来构造 MSBuild 路径
        $vsInstallDir = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise"
        $msbuildPath = Join-Path $vsInstallDir "MSBuild\Current\Bin\MSBuild.exe"

        if (-not (Test-Path $msbuildPath)) {
            Write-Error "MSBuild.exe not found at expected path: $msbuildPath. This is critical for building."
            exit 1
        }
        Write-Host "Found MSBuild.exe at: $msbuildPath"
        echo "MSBUILD_PATH=$msbuildPath" >> $env:GITHUB_OUTPUT
      shell: pwsh

    # 注意：dotnet restore 对于 .wapproj/.vcxproj 可能仍然显示警告，但 MSBuild.exe 在构建期间会处理依赖关系。
    - name: Restore NuGet packages (Optional, MSBuild handles it)
      run: dotnet restore App2.sln

    - name: Build WinUI 3 project
      run: ${{ steps.find_msbuild.outputs.MSBUILD_PATH }} App2.sln /p:Configuration=Release /p:Platform=x64
      shell: cmd

    - name: Publish WinUI 3 project
      run: ${{ steps.find_msbuild.outputs.MSBUILD_PATH }} "App2 (Package)/App2 (Package).csproj" /p:Configuration=Release /p:Platform=x64 /p:AppxBundlePlatforms="x64" /p:AppxPackageDir="AppPackages\" /p:GenerateAppxPackageOnBuild=true /t:Publish
      shell: cmd

    - name: List AppPackages directory content
      run: dir "App2 (Package)\AppPackages"
      shell: pwsh

    - name: Find MSIX package
      id: find_msix
      run: |
        $msixFile = Get-ChildItem -Path "App2 (Package)\AppPackages" -Filter "*.msix", "*.msixbundle" -Recurse | Sort-Object LastWriteTime -Descending | Select-Object -First 1 -ExpandProperty FullName
        
        if (-not $msixFile) {
            Write-Error "在 AppPackages 中未找到 MSIX 或 MSIXBUNDLE 文件。"
            exit 1
        }
        echo "Found MSIX file: $msixFile"
        echo "MSIX_PATH=$msixFile" >> $env:GITHUB_OUTPUT
      shell: pwsh

    - name: Upload MSIX artifact
      uses: actions/upload-artifact@v4
      with:
        name: WinUI3-App-MSIX
        path: ${{ steps.find_msix.outputs.MSIX_PATH }}
