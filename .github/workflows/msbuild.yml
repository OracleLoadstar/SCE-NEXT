name: Build and Package WinUI 3 App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x' # 确保这里与你的项目目标框架一致（例如 .NET 6, 7, 8）

    - name: Install Visual Studio Workloads for WinUI 3 # 修正后的步骤
      run: |
        # 找到 Visual Studio Installer 的路径
        $vsInstallerPath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
        # 查找最新安装的任何 Visual Studio 产品
        $vsInstallDir = & "$vsInstallerPath" -latest -products * -property installationPath

        if (-not $vsInstallDir) {
            Write-Error "Could not find Visual Studio installation path using vswhere.exe. Please check if Visual Studio is installed on the runner."
            exit 1
        }

        # Visual Studio Installer 的可执行文件路径
        $installerPath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vs_installer.exe"

        if (-not (Test-Path $installerPath)) {
            Write-Error "Visual Studio Installer executable not found at $installerPath. This is unexpected on windows-latest."
            exit 1
        }

        Write-Host "Found Visual Studio installation at: $vsInstallDir"
        Write-Host "Installing VS workloads using: $installerPath"

        # 使用 --quiet --wait --norestart 命令进行静默安装
        # --includeRecommended 确保安装推荐的组件
        # 这里指定了WinUI 3开发最常用的Visual Studio工作负载
        & "$installerPath" modify `
            --installPath "$vsInstallDir" `
            --add Microsoft.VisualStudio.Workload.Universal `
            --add Microsoft.VisualStudio.Workload.ManagedDesktop `
            --add Microsoft.VisualStudio.Workload.NativeDesktop `
            --quiet --wait --norestart

        if ($LASTEXITCODE -ne 0) {
            Write-Error "Failed to install Visual Studio workloads. Exit code: $LASTEXITCODE"
            exit $LASTEXITCODE
        }
        Write-Host "Visual Studio workloads installed successfully."
      shell: pwsh # 确保使用 PowerShell

    - name: Restore NuGet packages
      run: dotnet restore App2.sln

    - name: Build WinUI 3 project
      run: dotnet build App2.sln --configuration Release /p:Platform=x64

    - name: Publish WinUI 3 project
      run: dotnet publish "App2 (Package)/App2 (Package).csproj" -c Release -r win-x64 --self-contained true

    - name: List publish directory content
      run: dir "App2 (Package)/bin/Release/net8.0-windows10.0.19041.0/win-x64/publish"

    - name: Find MSIX package
      id: find_msix
      run: |
        $msixFile = Get-ChildItem -Path "App2 (Package)/AppPackages" -Filter "*.msix" -Recurse | Select-Object -ExpandProperty FullName
        echo "Found MSIX file: $msixFile"
        echo "MSIX_PATH=$msixFile" >> $env:GITHUB_OUTPUT

    - name: Upload MSIX artifact
      uses: actions/upload-artifact@v4
      with:
        name: WinUI3-App-MSIX
        path: ${{ steps.find_msix.outputs.MSIX_PATH }}

    - name: Upload Published Binaries
      uses: actions/upload-artifact@v4
      with:
        name: WinUI3-Published-Binaries
        path: "App2 (Package)/bin/Release/net8.0-windows10.0.19041.0/win-x64/publish"
