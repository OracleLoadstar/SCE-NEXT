name: Build and Package WinUI 3 App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Install Visual Studio Workloads for WinUI 3
      run: |
        $vsInstallerPath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
        $vsInstallDir = & "$vsInstallerPath" -latest -products * -property installationPath

        if (-not $vsInstallDir) {
            Write-Error "Could not find Visual Studio installation path using vswhere.exe."
            exit 1
        }

        $installerPath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vs_installer.exe"
        if (-not (Test-Path $installerPath)) {
            Write-Error "Visual Studio Installer executable not found at $installerPath."
            exit 1
        }

        Write-Host "Found Visual Studio installation at: $vsInstallDir"
        Write-Host "Installing VS workloads using: $installerPath"

        & "$installerPath" modify `
            --installPath "$vsInstallDir" `
            --add Microsoft.VisualStudio.Workload.Universal `
            --add Microsoft.VisualStudio.Workload.ManagedDesktop `
            --add Microsoft.VisualStudio.Workload.NativeDesktop `
            --quiet --wait --norestart

        if ($LASTEXITCODE -ne 0) {
            Write-Error "Failed to install Visual Studio workloads. Exit code: $LASTEXITCODE"
            exit $LASTEXITCODE
        }
        Write-Host "Visual Studio workloads installed successfully."
      shell: pwsh

    - name: Find MSBuild.exe
      id: find_msbuild
      run: |
        $vsInstallDir = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise"
        $msbuildPath = Join-Path $vsInstallDir "MSBuild\Current\Bin\MSBuild.exe"

        if (-not (Test-Path $msbuildPath)) {
            Write-Error "MSBuild.exe not found at expected path: $msbuildPath. This is critical for building."
            exit 1
        }
        Write-Host "Found MSBuild.exe at: $msbuildPath"
        echo "MSBUILD_PATH=$msbuildPath" >> $env:GITHUB_OUTPUT
      shell: pwsh

    - name: Clear NuGet cache and Restore packages
      run: |
        dotnet nuget locals all --clear
        dotnet restore App2.sln
      shell: pwsh

    - name: List contents of WindowsAppSDK build tools directory # 关键诊断步骤
      run: |
        $appSdkPackageRoot = "D:\a\SCE-NEXT\SCE-NEXT\packages\Microsoft.WindowsAppSDK.1.7.250606001"
        $appSdkToolsNet472Path = Join-Path $appSdkPackageRoot "tools\net472"
        $compilerDllPath = Join-Path $appSdkToolsNet472Path "Microsoft.UI.Xaml.Markup.Compiler.dll"

        Write-Host "--- Checking WindowsAppSDK Compiler DLL existence ---"
        Write-Host "Expected package root: $appSdkPackageRoot"
        Write-Host "Expected compiler directory: $appSdkToolsNet472Path"
        Write-Host "Expected compiler DLL: $compilerDllPath"

        if (-not (Test-Path $appSdkPackageRoot)) {
            Write-Warning "WindowsAppSDK package root does not exist: $appSdkPackageRoot. NuGet restore likely failed to download it completely."
        } else {
            Write-Host "Listing contents of package root: $appSdkPackageRoot"
            dir $appSdkPackageRoot -Recurse -Depth 2 # 列出包根目录及下一级子目录
        }

        Write-Host "--- Detailed listing of compiler tools directory ---"
        if (-not (Test-Path $appSdkToolsNet472Path)) {
            Write-Warning "Compiler tools path does not exist: $appSdkToolsNet472Path. Check NuGet package structure."
        } else {
            dir $appSdkToolsNet472Path # 列出具体工具目录内容
        }

        if (-not (Test-Path $compilerDllPath)) {
            Write-Error "Compiler DLL is MISSING at: $compilerDllPath. This is the root cause of MSB4062."
            # 可以考虑在此处尝试重新下载或强制更新 NuGet 包，但首先诊断原因
            exit 1 # 如果文件确实缺失，则直接失败，以便更快看到问题
        } else {
            Write-Host "Compiler DLL found: $compilerDllPath"
            # 额外诊断：检查 DLL 的依赖项 (可选，通常需要特定工具如 Dependency Walker)
            # 例如，你可以尝试加载它在一个简单的powershell脚本中，看看是否有COM异常等
        }
        Write-Host "--- End of WindowsAppSDK Compiler DLL check ---"
      shell: pwsh

    - name: Build WinUI 3 project
      shell: pwsh
      run: |
        $msbuildPath = "${{ steps.find_msbuild.outputs.MSBUILD_PATH }}"
        Write-Host "Attempting to build with MSBuild: $msbuildPath"
        & "$msbuildPath" App2.sln /p:Configuration=Release /p:Platform=x64

    - name: Publish WinUI 3 project
      shell: pwsh
      run: |
        $msbuildPath = "${{ steps.find_msbuild.outputs.MSBUILD_PATH }}"
        Write-Host "Attempting to publish with MSBuild: $msbuildPath"
        & "$msbuildPath" "App2 (Package)/App2 (Package).csproj" /p:Configuration=Release /p:Platform=x64 /p:AppxBundlePlatforms="x64" /p:AppxPackageDir="AppPackages\" /p:GenerateAppxPackageOnBuild=true /t:Publish

    - name: List AppPackages directory content
      run: dir "App2 (Package)\AppPackages"
      shell: pwsh

    - name: Find MSIX package
      id: find_msix
      run: |
        $msixFile = Get-ChildItem -Path "App2 (Package)\AppPackages" -Filter "*.msix", "*.msixbundle" -Recurse | Sort-Object LastWriteTime -Descending | Select-Object -First 1 -ExpandProperty FullName
        
        if (-not $msixFile) {
            Write-Error "在 AppPackages 中未找到 MSIX 或 MSIXBUNDLE 文件。"
            exit 1
        }
        Write-Host "Found MSIX file: $msixFile"
        echo "MSIX_PATH=$msixFile" >> $env:GITHUB_OUTPUT
      shell: pwsh

    - name: Upload MSIX artifact
      uses: actions/upload-artifact@v4
      with:
        name: WinUI3-App-MSIX
        path: ${{ steps.find_msix.outputs.MSIX_PATH }}
